version: '3.8'

services:
  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.production
    ports:
      - "3001:3001"
      - "3002:3002"  # WebSocket port
    environment:
      - NODE_ENV=production
      - PORT=3001
      - WS_PORT=3002
      - FRONTEND_URL=https://ahiru-launchpad.com
      - MONGODB_URI=mongodb://mongodb:27017/ahiru-production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - BSC_RPC_URL=${BSC_RPC_URL}
      - BSC_RPC_BACKUP=${BSC_RPC_BACKUP}
      - AHIRU_TOKEN_ADDRESS=${AHIRU_TOKEN_ADDRESS}
      - AHIRU_LAUNCHPAD_ADDRESS=${AHIRU_LAUNCHPAD_ADDRESS}
      - BSCSCAN_API_KEY=${BSCSCAN_API_KEY}
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      - MORALIS_API_KEY=${MORALIS_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - ALERT_EMAIL_FROM=${ALERT_EMAIL_FROM}
      - ALERT_EMAIL_TO=${ALERT_EMAIL_TO}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - mongodb
      - redis
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - ahiru-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=ahiru-production
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    networks:
      - ahiru-network
    command: mongod --auth --bind_ip_all

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ahiru-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - ahiru-network

  # Analytics Processor
  analytics:
    build:
      context: .
      dockerfile: Dockerfile.analytics
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/ahiru-production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - BSC_RPC_URL=${BSC_RPC_URL}
      - AHIRU_TOKEN_ADDRESS=${AHIRU_TOKEN_ADDRESS}
      - AHIRU_LAUNCHPAD_ADDRESS=${AHIRU_LAUNCHPAD_ADDRESS}
    depends_on:
      - mongodb
      - redis
    restart: unless-stopped
    volumes:
      - ./logs/analytics:/app/logs
    networks:
      - ahiru-network

  # Blockchain Event Listener
  event-listener:
    build:
      context: .
      dockerfile: Dockerfile.event-listener
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/ahiru-production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - BSC_RPC_URL=${BSC_RPC_URL}
      - AHIRU_TOKEN_ADDRESS=${AHIRU_TOKEN_ADDRESS}
      - AHIRU_LAUNCHPAD_ADDRESS=${AHIRU_LAUNCHPAD_ADDRESS}
      - BSCSCAN_API_KEY=${BSCSCAN_API_KEY}
    depends_on:
      - mongodb
      - redis
    restart: unless-stopped
    volumes:
      - ./logs/events:/app/logs
    networks:
      - ahiru-network

  # Monitoring & Alerting
  monitoring:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/ahiru-production
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - ALERT_EMAIL_TO=${ALERT_EMAIL_TO}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    depends_on:
      - mongodb
    restart: unless-stopped
    volumes:
      - ./logs/monitoring:/app/logs
    networks:
      - ahiru-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  ahiru-network:
    driver: bridge