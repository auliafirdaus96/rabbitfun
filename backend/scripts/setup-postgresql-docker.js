#!/usr/bin/env node

/**
 * PostgreSQL Docker Setup Script
 *
 * This script sets up PostgreSQL using Docker for development/testing
 * Usage: node scripts/setup-postgresql-docker.js
 */

const { execSync } = require('child_process');
const fs = require('fs');

// Colors for console output
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkDocker() {
  try {
    execSync('docker --version', { stdio: 'pipe' });
    log('‚úÖ Docker is installed', 'green');
    return true;
  } catch (error) {
    log('‚ùå Docker is not installed or not running', 'red');
    log('üí° Install Docker: https://docs.docker.com/get-docker/', 'yellow');
    return false;
  }
}

function checkDockerCompose() {
  try {
    execSync('docker-compose --version', { stdio: 'pipe' });
    log('‚úÖ Docker Compose is installed', 'green');
    return true;
  } catch (error) {
    log('‚ùå Docker Compose is not installed', 'red');
    log('üí° Install Docker Compose: https://docs.docker.com/compose/install/', 'yellow');
    return false;
  }
}

function createPostgresDockerCompose() {
  const dockerComposeContent = `# PostgreSQL Docker Setup for Rabbit Launchpad
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: rabbit-launchpad-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: rabbit_launchpad_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: rabbit123456
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backups:/backups
    networks:
      - rabbit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rabbit_launchpad_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: rabbit-launchpad-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@rabbitlaunchpad.dev
      PGADMIN_DEFAULT_PASSWORD: admin123456
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - rabbit-network
    depends_on:
      - postgres

volumes:
  postgres_data_dev:
    driver: local
  pgadmin_data:
    driver: local

networks:
  rabbit-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
`;

  fs.writeFileSync('docker-compose.postgres.yml', dockerComposeContent);
  log('‚úÖ Created docker-compose.postgres.yml', 'green');
}

function createDatabaseInitScript() {
  const initSqlContent = `-- Rabbit Launchpad Database Initialization
-- This script sets up the database with initial configuration

-- Create extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

-- Create custom types
CREATE TYPE blockchain_transaction_status AS ENUM (
    'PENDING',
    'PROCESSING',
    'CONFIRMED',
    'FAILED',
    'CANCELLED'
);

CREATE TYPE token_status AS ENUM (
    'CREATED',
    'ACTIVE',
    'PAUSED',
    'COMPLETED',
    'CANCELLED'
);

-- Create indexes for performance
-- These will be created by Prisma, but we can add custom ones here

-- Log initialization
INSERT INTO pg_stat_statements_info (dealloc) VALUES (0);

-- Grant permissions (if needed)
-- GRANT ALL PRIVILEGES ON DATABASE rabbit_launchpad_dev TO postgres;
`;

  // Ensure scripts directory exists
  if (!fs.existsSync('./scripts')) {
    fs.mkdirSync('./scripts', { recursive: true });
  }

  fs.writeFileSync('./scripts/init-db.sql', initSqlContent);
  log('‚úÖ Created database initialization script', 'green');
}

function updateEnvironmentForDocker() {
  const envContent = `# PostgreSQL Docker Environment Configuration
# This file is automatically generated by setup-postgresql-docker.js

# Database Configuration for Docker PostgreSQL
DATABASE_URL="postgresql://postgres:rabbit123456@localhost:5432/rabbit_launchpad_dev"
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_NAME=rabbit_launchpad_dev
DATABASE_USER=postgres
DATABASE_PASSWORD=rabbit123456
DATABASE_SSL=false
DATABASE_SSL_MODE=prefer
DATABASE_POOL_MIN=5
DATABASE_POOL_MAX=20

# PostgreSQL Docker Configuration
POSTGRES_DB=rabbit_launchpad_dev
POSTGRES_USER=postgres
POSTGRES_PASSWORD=rabbit123456

# Prisma Configuration for PostgreSQL
PRISMA_SCHEMA_ENGINE=postgresql
`;

  fs.writeFileSync('.env.postgresql.docker', envContent);
  log('‚úÖ Created .env.postgresql.docker', 'green');
}

function startPostgreSQL() {
  log('\nüöÄ Starting PostgreSQL container...', 'cyan');
  log('====================================', 'cyan');

  try {
    // Start PostgreSQL container
    log('üì¶ Starting PostgreSQL database...', 'yellow');
    execSync('docker-compose -f docker-compose.postgres.yml up -d postgres', { stdio: 'inherit' });

    // Wait for PostgreSQL to be ready
    log('‚è≥ Waiting for PostgreSQL to be ready...', 'yellow');
    setTimeout(() => {
      log('‚úÖ PostgreSQL is starting up...', 'green');
    }, 5000);

    return true;
  } catch (error) {
    log(`‚ùå Failed to start PostgreSQL: ${error.message}`, 'red');
    return false;
  }
}

function testPostgreSQLConnection() {
  log('\nüîó Testing PostgreSQL connection...', 'cyan');
  log('=====================================', 'cyan');

  try {
    const result = execSync('docker exec rabbit-launchpad-postgres-dev psql -U postgres -d rabbit_launchpad_dev -c "SELECT version();"', { encoding: 'utf8' });
    log('‚úÖ PostgreSQL connection successful', 'green');

    // Extract version info
    const versionMatch = result.match(/PostgreSQL (\d+\.\d+)/);
    if (versionMatch) {
      log(`üìä PostgreSQL version: ${versionMatch[1]}`, 'blue');
    }

    return true;
  } catch (error) {
    log(`‚ùå PostgreSQL connection failed: ${error.message}`, 'red');
    return false;
  }
}

function setupPrismaForPostgreSQL() {
  log('\nüìù Setting up Prisma for PostgreSQL...', 'cyan');
  log('=======================================', 'cyan');

  try {
    // Check if PostgreSQL schema exists
    const pgSchemaPath = './prisma/schema.postgresql.prisma';
    if (fs.existsSync(pgSchemaPath)) {
      log('‚úÖ Found PostgreSQL schema', 'green');

      // Backup current schema
      if (fs.existsSync('./prisma/schema.prisma')) {
        fs.copyFileSync('./prisma/schema.prisma', './prisma/schema.prisma.backup');
        log('‚úÖ Backed up current schema', 'green');
      }

      // Set PostgreSQL schema as active
      fs.copyFileSync(pgSchemaPath, './prisma/schema.prisma');
      log('‚úÖ Set PostgreSQL schema as active', 'green');
    }

    // Generate Prisma client for PostgreSQL
    log('üî® Generating Prisma client for PostgreSQL...', 'yellow');
    execSync('npx prisma generate', { stdio: 'inherit' });
    log('‚úÖ Prisma client generated successfully', 'green');

    return true;
  } catch (error) {
    log(`‚ùå Prisma setup failed: ${error.message}`, 'red');
    return false;
  }
}

function createMigrationInstructions() {
  log('\nüìã PostgreSQL Migration Instructions:', 'cyan');
  log('======================================', 'cyan');

  log('\nüöÄ Next steps to complete migration:', 'yellow');
  log('');
  log('1. Create initial migration:', 'blue');
  log('   DATABASE_URL="postgresql://postgres:rabbit123456@localhost:5432/rabbit_launchpad_dev" npx prisma migrate dev --name init_postgresql', 'blue');
  log('');
  log('2. Push schema to database:', 'blue');
  log('   DATABASE_URL="postgresql://postgres:rabbit123456@localhost:5432/rabbit_launchpad_dev" npx prisma db push', 'blue');
  log('');
  log('3. Test database connection:', 'blue');
  log('   DATABASE_URL="postgresql://postgres:rabbit123456@localhost:5432/rabbit_launchpad_dev" npm run dev', 'blue');
  log('');
  log('4. (Optional) Access pgAdmin:', 'blue');
  log('   URL: http://localhost:5050', 'blue');
  log('   Email: admin@rabbitlaunchpad.dev', 'blue');
  log('   Password: admin123456', 'blue');
  log('');
  log('5. Stop PostgreSQL when done:', 'blue');
  log('   docker-compose -f docker-compose.postgres.yml down', 'blue');
  log('');
  log('6. View logs:', 'blue');
  log('   docker-compose -f docker-compose.postgres.yml logs -f postgres', 'blue');
  log('');
}

function showConnectionInfo() {
  log('\nüîó PostgreSQL Connection Information:', 'cyan');
  log('=====================================', 'cyan');

  log('\nüìä Database Details:', 'yellow');
  log('   Host: localhost', 'white');
  log('   Port: 5432', 'white');
  log('   Database: rabbit_launchpad_dev', 'white');
  log('   Username: postgres', 'white');
  log('   Password: rabbit123456', 'white');
  log('   URL: postgresql://postgres:rabbit123456@localhost:5432/rabbit_launchpad_dev', 'white');

  log('\nüîß Management Tools:', 'yellow');
  log('   pgAdmin: http://localhost:5050', 'white');
  log('   Admin Email: admin@rabbitlaunchpad.dev', 'white');
  log('   Admin Password: admin123456', 'white');

  log('\nüìÅ Important Files:', 'yellow');
  log('   Docker Compose: docker-compose.postgres.yml', 'white');
  log('   Environment: .env.postgresql.docker', 'white');
  log('   Init Script: scripts/init-db.sql', 'white');
  log('   Schema Backup: prisma/schema.prisma.backup', 'white');
}

function main() {
  log('üê∞ Rabbit Launchpad - PostgreSQL Docker Setup', 'blue');
  log('==============================================', 'blue');

  // Check prerequisites
  if (!checkDocker() || !checkDockerCompose()) {
    log('\n‚ùå Prerequisites not met. Please install Docker and Docker Compose.', 'red');
    process.exit(1);
  }

  // Create configuration files
  log('\nüìù Creating configuration files...', 'cyan');
  createPostgresDockerCompose();
  createDatabaseInitScript();
  updateEnvironmentForDocker();

  // Start PostgreSQL
  if (!startPostgreSQL()) {
    log('\n‚ùå Failed to start PostgreSQL.', 'red');
    process.exit(1);
  }

  // Wait a bit for database to start
  log('\n‚è≥ Waiting for PostgreSQL to fully start...', 'yellow');
  setTimeout(() => {
    // Test connection
    if (testPostgreSQLConnection()) {
      // Setup Prisma
      if (setupPrismaForPostgreSQL()) {
        // Show success and next steps
        log('\nüéâ PostgreSQL Docker setup completed successfully!', 'green');
        log('üìä Database is ready for migration and use.', 'green');

        // Show connection info
        showConnectionInfo();

        // Show migration instructions
        createMigrationInstructions();

        log('\n‚úÖ Your PostgreSQL development environment is ready!', 'green');
      } else {
        log('\n‚ö†Ô∏è PostgreSQL started, but Prisma setup failed.', 'yellow');
        log('üí° You can still connect to the database manually.', 'yellow');
      }
    } else {
      log('\n‚ö†Ô∏è PostgreSQL container started, but connection test failed.', 'yellow');
      log('üí° The database might still be starting up. Try again in a minute.', 'yellow');
    }
  }, 10000); // Wait 10 seconds for database to start
}

// Handle errors gracefully
process.on('unhandledRejection', (reason, promise) => {
  log(`‚ùå Unhandled Error: ${reason}`, 'red');
  process.exit(1);
});

// Run the setup
if (require.main === module) {
  main();
}

module.exports = { main, testPostgreSQLConnection, setupPrismaForPostgreSQL };