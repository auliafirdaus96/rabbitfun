name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    paths: [ 'frontend/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'frontend/**' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality & Security
  quality-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run Prettier check
      run: npm run format:check

    - name: TypeScript compilation check
      run: npm run build

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Bundle size analysis
      uses: preactjs/compressed-size-action@v2
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        pattern: "./dist/**/*.{js,css,html}"
        exclude: "{./dist/**/*.map,./dist/**/manifest.json}"

  # Testing
  test:
    runs-on: ubuntu-latest
    needs: quality-checks
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm run test:unit

    - name: Run component tests
      run: npm run test:component

    - name: Generate test coverage
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # E2E Testing
  e2e-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install --with-deps

    - name: Build application
      run: npm run build

    - name: Run E2E tests
      run: npm run test:e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  # Build & Performance Analysis
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    outputs:
      build-artifact: ${{ steps.upload.outputs.artifact-id }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_WS_URL: ${{ secrets.VITE_WS_URL }}
        VITE_CHAIN_ID: ${{ secrets.VITE_CHAIN_ID }}
        VITE_RPC_URL: ${{ secrets.VITE_RPC_URL }}

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Analyze bundle size
      run: |
        npx bundlesize

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      id: upload
      with:
        name: frontend-dist
        path: frontend/dist/
        retention-days: 30

  # Build Docker Image
  build-docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-dist
        path: frontend/dist/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend@${{ steps.build.outputs.digest }}
        format: spdx-json
        output-file: ./frontend/sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom-frontend
        path: ./frontend/sbom.spdx.json

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend@${{ needs.build-docker.outputs.image-digest }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, build-docker, security-scan]
    if: github.ref == 'refs/heads/staging'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig

        # Update image tag in deployment
        sed -i "s|IMAGE_TAG|${{ needs.build-docker.outputs.image-tag }}|g" .k8s/staging/frontend-deployment.yaml

        # Apply Kubernetes manifests
        kubectl apply -f .k8s/staging/

        # Wait for deployment
        kubectl rollout status deployment/rabbit-frontend -n staging --timeout=300s

        # Run health checks
        kubectl wait --for=condition=ready pod -l app=rabbit-frontend -n staging --timeout=60s

    - name: Run smoke tests
      run: |
        chmod +x .scripts/smoke-tests.sh
        ./.scripts/smoke-tests.sh staging-frontend

    - name: Invalidate CDN cache
      run: |
        if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
        fi

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, build-docker, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig

        # Update image tag in deployment
        sed -i "s|IMAGE_TAG|${{ needs.build-docker.outputs.image-tag }}|g" .k8s/production/frontend-deployment.yaml

        # Apply Kubernetes manifests
        kubectl apply -f .k8s/production/

        # Wait for deployment
        kubectl rollout status deployment/rabbit-frontend -n production --timeout=600s

        # Run health checks
        kubectl wait --for=condition=ready pod -l app=rabbit-frontend -n production --timeout=120s

    - name: Run smoke tests
      run: |
        chmod +x .scripts/smoke-tests.sh
        ./.scripts/smoke-tests.sh production-frontend

    - name: Run performance tests
      run: |
        chmod +x .scripts/performance-tests.sh
        ./.scripts/performance-tests.sh frontend

    - name: Invalidate CDN cache
      run: |
        if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
        fi

    - name: Update monitoring
      run: |
        chmod +x .scripts/update-monitoring.sh
        ./.scripts/update-monitoring.sh frontend

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          🚀 *Frontend Production Deployment Status: ${{ job.status }}*
          📦 *Image:* ${{ needs.build-docker.outputs.image-tag }}
          📋 *Commit:* ${{ github.sha }}
          👤 *Deployer:* ${{ github.actor }}

  # Accessibility Testing
  accessibility-test:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Pa11y
      run: npm install -g pa11y-ci

    - name: Run accessibility tests
      run: |
        pa11y-ci --sitemap https://rabbitlaunchpad.io/sitemap.xml --config .pa11yci.json

    - name: Upload accessibility report
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: accessibility-report
        path: pa11y-report/
        retention-days: 30