name: 🔒 Security Scanning

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Run npm audit
        run: |
          cd backend
          npm audit --audit-level=moderate --json > audit-report.json || true

      - name: Run Snyk security scan
        if: env.SNYK_TOKEN
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            backend/audit-report.json
            .snyk
        retention-days: 30

  code-security-scan:
    name: 🔍 Code Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Run ESLint security rules
        run: |
          cd backend
          npx eslint . --ext .ts,.js --config .eslintrc.js --format json > eslint-report.json || true

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: Autobuild CodeQL database
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:typescript"

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/xss
            p/r2c-security-audit
          severity: INFO

      - name: Upload code security reports
        uses: actions/upload-artifact@v4
        with:
          name: code-security-reports
          path: |
            backend/eslint-report.json
            semgrep-report.sarif
            .github/codeql-results
        retention-days: 30

  container-security-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Dockerfile security scan
        run: |
          # Install dockle
          curl -L -o dockle -O https://github.com/goodwithtech/dockle/releases/download/v0.4.9/dockle-linux-amd64
          chmod +x dockle
          sudo mv dockle /usr/local/bin/

          # Build Docker image
          cd backend
          docker build -t rabbit-launchpad-backend:latest .

          # Scan Docker image
          dockle --exit-code 1 --format json rabbit-launchpad-backend:latest > dockle-report.json || true

      - name: Upload container security reports
        uses: actions/upload-artifact@v4
        with:
          name: container-security-reports
          path: |
            trivy-results.sarif
            backend/dockle-report.json
        retention-days: 30

  api-security-test:
    name: 🌐 API Security Testing
    runs-on: ubuntu-latest
    needs: [dependency-scan]
    services:
      # Start PostgreSQL for testing
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: rabbit_launchpad_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready -U postgres
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      # Start Redis for testing
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Setup test database
        run: |
          cd backend
          echo "DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/rabbit_launchpad_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          npm run db:generate
          npm run db:migrate

      - name: Start backend server
        run: |
          cd backend
          npm run dev &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/rabbit_launchpad_test
          REDIS_URL: redis://localhost:6379

      - name: Wait for server to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3001/health; do sleep 1; done'

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3001'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-t 30000' # 30 minute timeout

      - name: Run custom API security tests
        run: |
          cd backend
          node scripts/security-scan.js api

      - name: Upload API security reports
        uses: actions/upload-artifact@v4
        with:
          name: api-security-reports
          path: |
            backend/security-reports/
            report_html.html
            report_json.json
        retention-days: 30

  secrets-scan:
    name: 🔐 Secrets Detection
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          verbose: true
          report-format: sarif
          output: gitleaks-results.sarif

      - name: Upload Gitleaks results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gitleaks-results.sarif

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog-action@master
        with:
          path: .
          base: main
          head: main

  security-scorecard:
    name: 📊 Security Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run OSSF Scorecard
        uses: ossf/scorecard-action@v2.3.1
        with:
          results-file: scorecard-results.json
          results-format: json
          repo-url: https://github.com/${{ github.repository }}

      - name: Upload Scorecard results
        uses: actions/upload-artifact@v4
        with:
          name: security-scorecard
          path: scorecard-results.json
        retention-days: 30

  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, container-security-scan, api-security-test, secrets-scan]
    if: always()
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts

      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Overall Assessment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count total vulnerabilities from all scans
          total_vulns=0
          if [ -f security-artifacts/security-reports/security-scan-report.json ]; then
            vulns=$(cat security-artifacts/security-reports/security-scan-report.json | jq '.vulnerabilities | length')
            total_vulns=$((total_vulns + vulns))
          fi

          echo "- **Total Vulnerabilities Found:** $total_vulns" >> $GITHUB_STEP_SUMMARY

          # Add details for each scan type
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Scan Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Dependency scan
          if [ -f security-artifacts/security-reports/dependency-scan.json ]; then
            echo "### 📦 Dependencies" >> $GITHUB_STEP_SUMMARY
            if [ -f security-artifacts/security-reports/dependency-scan.json ]; then
              npm_audits=$(cat security-artifacts/security-reports/dependency-scan.json | jq '.npmAudit.totalVulnerabilities || 0')
              echo "- npm audit vulnerabilities: $npm_audits" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Code security
          if [ -f security-artifacts/code-security-reports/eslint-report.json ]; then
            echo "### 🔒 Code Security" >> $GITHUB_STEP_SUMMARY
            eslint_issues=$(cat security-artifacts/code-security-reports/eslint-report.json | jq '.length || 0')
            echo "- ESLint security issues: $eslint_issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Container security
          if [ -f security-artifacts/container-security-reports/trivy-results.sarif ]; then
            echo "### 🐳 Container Security" >> $GITHUB_STEP_SUMMARY
            if command -v jq >/dev/null 2>&1; then
              trivy_issues=$(cat security-artifacts/container-security-reports/trivy-results.sarif | jq '.runs[0].results | length' || echo "0")
              echo "- Trivy vulnerabilities: $trivy_issues" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # API security
          if [ -f security-artifacts/api-security-reports/api-security-scan.json ]; then
            echo "### 🌐 API Security" >> $GITHUB_STEP_SUMMARY
            api_vulns=$(cat security-artifacts/api-security-reports/api-security-scan.json | jq '.vulnerabilities | length || 0')
            echo "- API vulnerabilities: $api_vulns" >> $GITHUB_STEP_SUMMARY
            echo "" >> $ITHUB_STEP_SUMMARY
          fi

          # Recommendations
          echo "## 💡 Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ $total_vulns -gt 0 ]; then
            echo "⚠️ **Security Issues Found:** Address the identified vulnerabilities before merging to main branch" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "1. Review and fix all high and critical severity issues" >> $GITHUB_STEP_SUMMARY
            echo "2. Update vulnerable dependencies" >> $GITHUB_STEP_SUMMARY
            echo "3. Implement proper input validation and sanitization" >> $GITHUB_STEP_SUMMARY
            echo "4. Add security headers to API responses" >> $GITHUB_STEP_SUMMARY
            echo "5. Review and secure container configurations" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No Critical Issues Found** - Great job maintaining security!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $ITHUB_STEP_SUMMARY
            echo "Continue to:" >> $ITHUB_STEP_SUMMARY
            echo "- Run security scans regularly" >> $ITHUB_STEP_SUMMARY
            echo("- Keep dependencies updated" >> $GITHUB_STEP_SUMMARY
            echo("- Follow security best practices" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
          uses: actions/github-script@v7
          with:
            script: |
              const { owner, repo } = context.repo;
              const pr_number = context.issue.number;

              // Get security scan results
              const fs = require('fs');
              let securityData = {};

              try {
                if (fs.existsSync('security-artifacts/security-reports/security-scan-report.json')) {
                  securityData = JSON.parse(fs.readFileSync('security-artifacts/security-reports/security-scan-report.json', 'utf8'));
                }
              } catch (error) {
                console.log('Could not read security report');
              }

              const vulnerabilities = securityData.vulnerabilities || [];
              const score = securityData.score || 0;

              // Create comment
              const comment = `## 🔒 Security Scan Results

              **Security Score:** ${score}/100 (${score >= 70 ? '✅' : '❌'})

              **Vulnerabilities Found:** ${vulnerabilities.length}

              ${vulnerabilities.length > 0 ? '⚠️ **Issues found that need attention**' : '✅ **No critical security issues detected**'}

              ${vulnerabilities.length > 0 ? '\n### Recommendations:\n1. Review and fix identified vulnerabilities\n2. Update vulnerable dependencies\n3. Implement security best practices' : ''}`;

              // Post comment
              github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr_number,
                body: comment
              });

  # Security policy check
  security-policy:
    name: 📋 Security Policy Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy compliance
        run: |
          echo "📋 Checking security policy compliance..." > security-policy-check.md

          # Check for security configurations
          if [ -f backend/.env.example ]; then
            echo "✅ Environment example file exists" >> security-policy-check.md
          else
            echo "❌ Missing .env.example file" >> security-policy-check.md
          fi

          if [ -f backend/.env.test ]; then
            echo "✅ Test environment configuration exists" >> security-policy-check.md
          else
            echo "⚠️ Consider adding .env.test for testing" >> security-policy-check.md
          fi

          # Check for security scripts
          if [ -f backend/scripts/security-scan.js ]; then
            echo "✅ Security scanning script exists" >> security-policy-check.md
          else
            echo "⚠️ Consider adding security scanning script" >> security-policy-check.md
          fi

          # Check for rate limiting
          if grep -r "rate.*limit" backend/src/ > /dev/null 2>&1; then
            echo "✅ Rate limiting implemented" >> security-policy-check.md
          else
            echo "⚠️ Rate limiting may not be implemented" >> security-policy-check.md
          fi

          # Check for helmet middleware
          if grep -r "helmet" backend/src/ > /dev/null 2>&1; then
            echo "✅ Helmet security headers implemented" >> security-policy-check.md
          else
            echo "⚠️ Consider implementing Helmet for security headers" >> security-policy-check.md
          fi

          # Check for input validation
          if grep -r "validate\|joi\|express-validator" backend/src/ > /dev/null 2>&1; then
            echo "✅ Input validation implemented" >> security-policy-check.md
          else
            echo "⚠️ Input validation may not be implemented" >> security-policy-check.md
          fi

      - name: Upload policy check report
        uses: actions/upload-artifact@v4
        with:
          name: security-policy-check
          path: security-policy-check.md
          retention-days: 7