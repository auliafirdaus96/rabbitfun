name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    paths: [ 'backend/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality & Security
  quality-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run Prettier check
      run: npm run format:check

    - name: TypeScript compilation check
      run: npm run build

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Testing
  test:
    runs-on: ubuntu-latest
    needs: quality-checks
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rabbit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      run: |
        npm run db:generate
        npm run db:migrate
        npm run db:seed

    - name: Run unit tests
      run: npm run test:unit

    - name: Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rabbit_test
        REDIS_URL: redis://localhost:6379

    - name: Generate test coverage
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Build Docker Image
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend@${{ steps.build.outputs.digest }}
        format: spdx-json
        output-file: ./backend/sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: ./backend/sbom.spdx.json

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend@${{ needs.build.outputs.image-digest }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/staging'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig

        # Update image tag in deployment
        sed -i "s|IMAGE_TAG|${{ needs.build.outputs.image-tag }}|g" .k8s/staging/backend-deployment.yaml

        # Apply Kubernetes manifests
        kubectl apply -f .k8s/staging/

        # Wait for deployment
        kubectl rollout status deployment/rabbit-backend -n staging --timeout=300s

        # Run health checks
        kubectl wait --for=condition=ready pod -l app=rabbit-backend -n staging --timeout=60s

    - name: Run smoke tests
      run: |
        chmod +x .scripts/smoke-tests.sh
        ./.scripts/smoke-tests.sh staging

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Create backup
      run: |
        export KUBECONFIG=kubeconfig
        chmod +x .scripts/backup-database.sh
        ./.scripts/backup-database.sh production

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig

        # Update image tag in deployment
        sed -i "s|IMAGE_TAG|${{ needs.build.outputs.image-tag }}|g" .k8s/production/backend-deployment.yaml

        # Apply Kubernetes manifests
        kubectl apply -f .k8s/production/

        # Wait for deployment
        kubectl rollout status deployment/rabbit-backend -n production --timeout=600s

        # Run health checks
        kubectl wait --for=condition=ready pod -l app=rabbit-backend -n production --timeout=120s

    - name: Run smoke tests
      run: |
        chmod +x .scripts/smoke-tests.sh
        ./.scripts/smoke-tests.sh production

    - name: Run performance tests
      run: |
        chmod +x .scripts/performance-tests.sh
        ./.scripts/performance-tests.sh production

    - name: Update monitoring
      run: |
        chmod +x .scripts/update-monitoring.sh
        ./.scripts/update-monitoring.sh production

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          ðŸš€ *Production Deployment Status: ${{ job.status }}*
          ðŸ“¦ *Image:* ${{ needs.build.outputs.image-tag }}
          ðŸ“‹ *Commit:* ${{ github.sha }}
          ðŸ‘¤ *Deployer:* ${{ github.actor }}

  # Rollback (Manual Trigger)
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Rollback deployment
      run: |
        export KUBECONFIG=kubeconfig

        # Get previous revision
        PREVIOUS_REVISION=$(kubectl rollout history deployment/rabbit-backend -n production | tail -n 2 | head -n 1 | awk '{print $1}')

        # Rollback to previous revision
        kubectl rollout undo deployment/rabbit-backend -n production --to-revision=$PREVIOUS_REVISION

        # Wait for rollback
        kubectl rollout status deployment/rabbit-backend -n production --timeout=300s

    - name: Verify rollback
      run: |
        export KUBECONFIG=kubeconfig
        chmod +x .scripts/smoke-tests.sh
        ./.scripts/smoke-tests.sh production

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'success'
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          ðŸ”„ *Production Rollback Completed*
          ðŸ“¦ *Previous Revision:* ${{ PREVIOUS_REVISION }}
          ðŸ‘¤ *Initiated by:* ${{ github.actor }}