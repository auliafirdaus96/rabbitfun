input {
  # Backend application logs
  file {
    path => "/app/logs/*.log"
    start_position => "beginning"
    codec => "json"
    tags => ["backend", "application"]
  }

  # Nginx access logs
  file {
    path => "/var/log/nginx/access.log"
    start_position => "beginning"
    codec => "json"
    tags => ["nginx", "access"]
  }

  # Nginx error logs
  file {
    path => "/var/log/nginx/error.log"
    start_position => "beginning"
    codec => "json"
    tags => ["nginx", "error"]
  }

  # System logs
  beats {
    port => 5044
    tags => ["system"]
  }
}

filter {
  # Parse JSON logs
  if [tags][0] == "backend" {
    json {
      source => "message"
    }

    # Add environment and service tags
    mutate {
      add_field => { "[@metadata][service]" => "rabbit-backend" }
      add_field => { "[@metadata][environment]" => "production" }
    }

    # Parse timestamp
    date {
      match => [ "timestamp", "ISO8601" ]
    }

    # Parse log levels
    if [level] {
      mutate {
        add_field => { "log_level" => "%{level}" }
      }
    }
  }

  # Parse Nginx logs
  if [tags][0] == "nginx" {
    grok {
      match => {
        "message" => "%{COMBINEDAPACHELOG}"
      }
    }

    # Parse response time
    if [response] and [request] {
      mutate {
        add_field => { "request_time" => "%{response_time}" }
      }
    }

    # Extract user agent
    if [agent] {
      useragent {
        source => "agent"
        target => "user_agent"
      }
    }

    # GeoIP for location data
    if [clientip] {
      geoip {
        source => "clientip"
        target => "geoip"
      }
    }
  }

  # Add correlation IDs for tracing
  if ![request_id] {
    uuid {
      target => "request_id"
    }
  }

  # Mask sensitive data
  mutate {
    gsub => [
      "message", "password=[^&]*", "password=*****",
      "message", "token=[^&]*", "token=*****",
      "message", "secret=[^&]*", "secret=*****",
      "message", "api_key=[^&]*", "api_key=*****"
    ]
  }

  # Add computed fields
  if [response_time] {
    mutate {
      convert => { "response_time" => "float" }
    }
  }

  # Rate limiting alert
  if [response_time] and [response_time] > 5.0 {
    mutate {
      add_tag => ["slow_request"]
    }
  }

  # Error alert
  if [status] and [status] >= 500 {
    mutate {
      add_tag => ["error", "critical"]
    }
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "rabbit-launchpad-%{[@metadata][service]}-%{[@metadata][environment]}-%{+YYYY.MM.dd}"
    template_name => "rabbit-launchpad"
    template_pattern => "rabbit-launchpad-*"
    template => {
      "index_patterns" => ["rabbit-launchpad-*"],
      "settings" => {
        "number_of_shards" => 1,
        "number_of_replicas" => 1
      },
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" },
          "level" => { "type" => "keyword" },
          "message" => { "type" => "text" },
          "service" => { "type" => "keyword" },
          "environment" => { "type" => "keyword" },
          "request_id" => { "type" => "keyword" },
          "user_id" => { "type" => "keyword" },
          "clientip" => { "type" => "ip" },
          "response_time" => { "type" => "float" },
          "status" => { "type" => "integer" },
          "geoip" => {
            "properties" => {
              "location" => { "type" => "geo_point" },
              "country_name" => { "type" => "keyword" },
              "city_name" => { "type" => "keyword" }
            }
          }
        }
      }
    }
  }

  # Debug output (remove in production)
  if [@metadata][debug] {
    stdout {
      codec => rubydebug
    }
  }

  # Alert output for critical errors
  if "critical" in [tags] {
    http {
      url => "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
      http_method => "post"
      format => "json"
      mapping => {
        "text" => "Critical error in %{[@metadata][service]}: %{message}"
      }
    }
  }
}