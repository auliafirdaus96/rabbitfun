/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SafeBondingCurveMath,
  SafeBondingCurveMathInterface,
} from "../../../contracts/libraries/SafeBondingCurveMath";

const _abi = [
  {
    inputs: [],
    name: "InvalidInput",
    type: "error",
  },
  {
    inputs: [],
    name: "OverflowDetected",
    type: "error",
  },
  {
    inputs: [],
    name: "PrecisionLoss",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212205186ed8baea0bcbff0482f9319b0de78c2f42afd0584f13b6b363038b4db314c64736f6c63430008130033";

type SafeBondingCurveMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeBondingCurveMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeBondingCurveMath__factory extends ContractFactory {
  constructor(...args: SafeBondingCurveMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SafeBondingCurveMath & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): SafeBondingCurveMath__factory {
    return super.connect(runner) as SafeBondingCurveMath__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeBondingCurveMathInterface {
    return new Interface(_abi) as SafeBondingCurveMathInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SafeBondingCurveMath {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SafeBondingCurveMath;
  }
}
