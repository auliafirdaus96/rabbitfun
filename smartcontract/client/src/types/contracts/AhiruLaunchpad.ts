/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AhiruLaunchpad {
  export type TokenStateStruct = {
    tokenAddress: AddressLike;
    name: string;
    symbol: string;
    metadata: string;
    creator: AddressLike;
    soldSupply: BigNumberish;
    totalBNB: BigNumberish;
    initialPrice: BigNumberish;
    totalPlatformFees: BigNumberish;
    totalCreatorFees: BigNumberish;
    bondingCurveLiquidity: BigNumberish;
    liquidityPoolAmount: BigNumberish;
    graduated: boolean;
    exists: boolean;
  };

  export type TokenStateStructOutput = [
    tokenAddress: string,
    name: string,
    symbol: string,
    metadata: string,
    creator: string,
    soldSupply: bigint,
    totalBNB: bigint,
    initialPrice: bigint,
    totalPlatformFees: bigint,
    totalCreatorFees: bigint,
    bondingCurveLiquidity: bigint,
    liquidityPoolAmount: bigint,
    graduated: boolean,
    exists: boolean
  ] & {
    tokenAddress: string;
    name: string;
    symbol: string;
    metadata: string;
    creator: string;
    soldSupply: bigint;
    totalBNB: bigint;
    initialPrice: bigint;
    totalPlatformFees: bigint;
    totalCreatorFees: bigint;
    bondingCurveLiquidity: bigint;
    liquidityPoolAmount: bigint;
    graduated: boolean;
    exists: boolean;
  };
}

export interface AhiruLaunchpadInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS"
      | "BONDING_CURVE_SPLIT"
      | "CREATE_FEE"
      | "EMERGENCY_TIMELOCK"
      | "E_PRECISION"
      | "FEE_CREATOR_PERCENT"
      | "FEE_PLATFORM_PERCENT"
      | "GRADUATION_TOKEN_ALLOCATION"
      | "GROSS_RAISE_TARGET"
      | "INITIAL_PRICE"
      | "K_FACTOR"
      | "K_PRECISION"
      | "LP_SPLIT"
      | "MAX_EMERGENCY_WITHDRAW"
      | "MAX_EXPONENT"
      | "NET_RAISE_TARGET"
      | "SUPPLY_CONSTANT"
      | "TARGET_SUPPLY"
      | "TIMELOCK_DELAY"
      | "TOTAL_FEE_PERCENT"
      | "TOTAL_SUPPLY"
      | "buy"
      | "calculatePrice"
      | "calculateTokenPurchase"
      | "calculateTokenSale"
      | "completeTreasuryUpdate"
      | "createToken"
      | "deploymentTime"
      | "emergencyMode"
      | "emergencyWithdraw(uint256)"
      | "emergencyWithdraw()"
      | "fullEmergencyWithdraw"
      | "getAllTokens"
      | "getBondingCurveStats"
      | "getTokenInfo"
      | "globalState"
      | "graduate"
      | "initiateTreasuryUpdate"
      | "lastEmergencyWithdraw"
      | "owner"
      | "pendingTreasury"
      | "renounceOwnership"
      | "sell"
      | "transferOwnership"
      | "treasury"
      | "treasuryUpdateTime"
      | "updateDexRouter"
      | "updateTreasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "TokenBought"
      | "TokenCreated"
      | "TokenGraduated"
      | "TokenSold"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BONDING_CURVE_SPLIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_TIMELOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "E_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_CREATOR_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_PLATFORM_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRADUATION_TOKEN_ALLOCATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GROSS_RAISE_TARGET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "K_FACTOR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "K_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LP_SPLIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_EMERGENCY_WITHDRAW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_EXPONENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NET_RAISE_TARGET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPPLY_CONSTANT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TARGET_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIMELOCK_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_FEE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buy", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "calculatePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokenPurchase",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokenSale",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTreasuryUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fullEmergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBondingCurveStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "graduate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateTreasuryUpdate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastEmergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasuryUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDexRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BONDING_CURVE_SPLIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CREATE_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_TIMELOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "E_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_CREATOR_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_PLATFORM_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GRADUATION_TOKEN_ALLOCATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GROSS_RAISE_TARGET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "K_FACTOR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "K_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LP_SPLIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_EMERGENCY_WITHDRAW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_EXPONENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NET_RAISE_TARGET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPPLY_CONSTANT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TARGET_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIMELOCK_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_FEE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTreasuryUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploymentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fullEmergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondingCurveStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "graduate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateTreasuryUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEmergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDexRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenBoughtEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    buyer: AddressLike,
    bnbAmount: BigNumberish,
    tokenAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    buyer: string,
    bnbAmount: bigint,
    tokenAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    buyer: string;
    bnbAmount: bigint;
    tokenAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    name: string,
    symbol: string,
    creator: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    name: string,
    symbol: string,
    creator: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    name: string;
    symbol: string;
    creator: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenGraduatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    lpPair: AddressLike,
    lpBNB: BigNumberish,
    lpTokens: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    lpPair: string,
    lpBNB: bigint,
    lpTokens: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    lpPair: string;
    lpBNB: bigint;
    lpTokens: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSoldEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    seller: AddressLike,
    tokenAmount: BigNumberish,
    bnbAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    seller: string,
    tokenAmount: bigint,
    bnbAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    seller: string;
    tokenAmount: bigint;
    bnbAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AhiruLaunchpad extends BaseContract {
  connect(runner?: ContractRunner | null): AhiruLaunchpad;
  waitForDeployment(): Promise<this>;

  interface: AhiruLaunchpadInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  BONDING_CURVE_SPLIT: TypedContractMethod<[], [bigint], "view">;

  CREATE_FEE: TypedContractMethod<[], [bigint], "view">;

  EMERGENCY_TIMELOCK: TypedContractMethod<[], [bigint], "view">;

  E_PRECISION: TypedContractMethod<[], [bigint], "view">;

  FEE_CREATOR_PERCENT: TypedContractMethod<[], [bigint], "view">;

  FEE_PLATFORM_PERCENT: TypedContractMethod<[], [bigint], "view">;

  GRADUATION_TOKEN_ALLOCATION: TypedContractMethod<[], [bigint], "view">;

  GROSS_RAISE_TARGET: TypedContractMethod<[], [bigint], "view">;

  INITIAL_PRICE: TypedContractMethod<[], [bigint], "view">;

  K_FACTOR: TypedContractMethod<[], [bigint], "view">;

  K_PRECISION: TypedContractMethod<[], [bigint], "view">;

  LP_SPLIT: TypedContractMethod<[], [bigint], "view">;

  MAX_EMERGENCY_WITHDRAW: TypedContractMethod<[], [bigint], "view">;

  MAX_EXPONENT: TypedContractMethod<[], [bigint], "view">;

  NET_RAISE_TARGET: TypedContractMethod<[], [bigint], "view">;

  SUPPLY_CONSTANT: TypedContractMethod<[], [bigint], "view">;

  TARGET_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  TIMELOCK_DELAY: TypedContractMethod<[], [bigint], "view">;

  TOTAL_FEE_PERCENT: TypedContractMethod<[], [bigint], "view">;

  TOTAL_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  buy: TypedContractMethod<[tokenAddress: AddressLike], [void], "payable">;

  calculatePrice: TypedContractMethod<[supply: BigNumberish], [bigint], "view">;

  calculateTokenPurchase: TypedContractMethod<
    [
      currentSupply: BigNumberish,
      bnbAmount: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [bigint],
    "view"
  >;

  calculateTokenSale: TypedContractMethod<
    [
      currentSupply: BigNumberish,
      tokenAmount: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [bigint],
    "view"
  >;

  completeTreasuryUpdate: TypedContractMethod<[], [void], "nonpayable">;

  createToken: TypedContractMethod<
    [name: string, symbol: string, metadata: string],
    [void],
    "payable"
  >;

  deploymentTime: TypedContractMethod<[], [bigint], "view">;

  emergencyMode: TypedContractMethod<[], [boolean], "view">;

  "emergencyWithdraw(uint256)": TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "emergencyWithdraw()": TypedContractMethod<[], [void], "nonpayable">;

  fullEmergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getAllTokens: TypedContractMethod<[], [string[]], "view">;

  getBondingCurveStats: TypedContractMethod<
    [tokenAddress: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        currentPrice: bigint;
        marketCap: bigint;
        progress: bigint;
        isGraduated: boolean;
      }
    ],
    "view"
  >;

  getTokenInfo: TypedContractMethod<
    [tokenAddress: AddressLike],
    [AhiruLaunchpad.TokenStateStructOutput],
    "view"
  >;

  globalState: TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        totalTokensCreated: bigint;
        totalFeesCollected: bigint;
        dexRouter: string;
      }
    ],
    "view"
  >;

  graduate: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  initiateTreasuryUpdate: TypedContractMethod<
    [newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  lastEmergencyWithdraw: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingTreasury: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sell: TypedContractMethod<
    [tokenAddress: AddressLike, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  treasuryUpdateTime: TypedContractMethod<[], [bigint], "view">;

  updateDexRouter: TypedContractMethod<
    [newDexRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  updateTreasury: TypedContractMethod<
    [newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BONDING_CURVE_SPLIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CREATE_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EMERGENCY_TIMELOCK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "E_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_CREATOR_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_PLATFORM_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GRADUATION_TOKEN_ALLOCATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GROSS_RAISE_TARGET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INITIAL_PRICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "K_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "K_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LP_SPLIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_EMERGENCY_WITHDRAW"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_EXPONENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NET_RAISE_TARGET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SUPPLY_CONSTANT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TARGET_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TIMELOCK_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOTAL_FEE_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOTAL_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "calculatePrice"
  ): TypedContractMethod<[supply: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateTokenPurchase"
  ): TypedContractMethod<
    [
      currentSupply: BigNumberish,
      bnbAmount: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateTokenSale"
  ): TypedContractMethod<
    [
      currentSupply: BigNumberish,
      tokenAmount: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "completeTreasuryUpdate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createToken"
  ): TypedContractMethod<
    [name: string, symbol: string, metadata: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deploymentTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw(uint256)"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fullEmergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBondingCurveStats"
  ): TypedContractMethod<
    [tokenAddress: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        currentPrice: bigint;
        marketCap: bigint;
        progress: bigint;
        isGraduated: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenInfo"
  ): TypedContractMethod<
    [tokenAddress: AddressLike],
    [AhiruLaunchpad.TokenStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalState"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        totalTokensCreated: bigint;
        totalFeesCollected: bigint;
        dexRouter: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "graduate"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initiateTreasuryUpdate"
  ): TypedContractMethod<[newTreasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lastEmergencyWithdraw"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sell"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "treasuryUpdateTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateDexRouter"
  ): TypedContractMethod<[newDexRouter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTreasury"
  ): TypedContractMethod<[newTreasury: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenBought"
  ): TypedContractEvent<
    TokenBoughtEvent.InputTuple,
    TokenBoughtEvent.OutputTuple,
    TokenBoughtEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreated"
  ): TypedContractEvent<
    TokenCreatedEvent.InputTuple,
    TokenCreatedEvent.OutputTuple,
    TokenCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenGraduated"
  ): TypedContractEvent<
    TokenGraduatedEvent.InputTuple,
    TokenGraduatedEvent.OutputTuple,
    TokenGraduatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenSold"
  ): TypedContractEvent<
    TokenSoldEvent.InputTuple,
    TokenSoldEvent.OutputTuple,
    TokenSoldEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokenBought(address,address,uint256,uint256,uint256)": TypedContractEvent<
      TokenBoughtEvent.InputTuple,
      TokenBoughtEvent.OutputTuple,
      TokenBoughtEvent.OutputObject
    >;
    TokenBought: TypedContractEvent<
      TokenBoughtEvent.InputTuple,
      TokenBoughtEvent.OutputTuple,
      TokenBoughtEvent.OutputObject
    >;

    "TokenCreated(address,string,string,address,uint256)": TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
    TokenCreated: TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;

    "TokenGraduated(address,address,uint256,uint256,uint256)": TypedContractEvent<
      TokenGraduatedEvent.InputTuple,
      TokenGraduatedEvent.OutputTuple,
      TokenGraduatedEvent.OutputObject
    >;
    TokenGraduated: TypedContractEvent<
      TokenGraduatedEvent.InputTuple,
      TokenGraduatedEvent.OutputTuple,
      TokenGraduatedEvent.OutputObject
    >;

    "TokenSold(address,address,uint256,uint256,uint256)": TypedContractEvent<
      TokenSoldEvent.InputTuple,
      TokenSoldEvent.OutputTuple,
      TokenSoldEvent.OutputObject
    >;
    TokenSold: TypedContractEvent<
      TokenSoldEvent.InputTuple,
      TokenSoldEvent.OutputTuple,
      TokenSoldEvent.OutputObject
    >;
  };
}
